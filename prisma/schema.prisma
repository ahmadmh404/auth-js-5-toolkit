// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") 
}

 enum UserRole {
  USER
  ADMIN
} 

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]

  isTwoFactorEnabled Boolean @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Account {
  id                 String  @id
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
  
}

// Emaiol verification token
model Verification {
  id                String @id
  email             String
  token             String @unique
  expires           DateTime

  // one token for each email
  @@unique([email, token])
}

// Emaiol reset token
model PasswordResetToken {
  id                String @id
  email             String
  token             String @unique
  expires           DateTime

  @@unique([email, token]) 
}


//  Emaiol reset token
model TwoFactorToken {
  id                String @id
  email             String
  token             String @unique
  expires           DateTime

  @@unique([email, token]) 
}

model TwoFactorConfirmation {
  id String @id

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // each one-to-one relation should have a unique key
  @@unique(userId)
}